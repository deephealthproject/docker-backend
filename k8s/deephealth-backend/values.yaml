# Default values for deephealth-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: "deephealth-backend"
fullnameOverride: ""


# global settings
global:
  debug: &debug False
  # default pull policy for images
  imagePullPolicy: &imagePullPolicy "IfNotPresent"
  # persistence class used by services
  storageClass: &globalStorageClass ""
  # preserve secrets when a release is deleted
  retainSecrets: True
  # preserve PVC when a release is deleted
  retainPVCs: True



# ServiceType of the Back-end EndPoint
endpoint:
  service:
    type: NodePort

# Set external access to the services
ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: backend.127.0.0.1.nip.io
      serviceName: endpoint # service name without Release.Name prefix
      servicePort: 80

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Backend settings
backend:
  admin:
    username: admin
    # password: admin
    # email: admin@domain.it

  # Comma separated list of allowed hosts
  allowedHosts: "*"

  # Cross-Origin Resource Sharing (CORS) whitelist
  corsOriginWhiteList: ""

  # number of replicas
  replicaCount: 1

  # number of Gunicorn workers
  workers: 3

  image: &backend_image
    repository: dhealth/backend
    tag: 279f967
    pullPolicy: *imagePullPolicy

  service:
    type: ClusterIP
    port: 80
    containerPort: 8000

  # Persistence settings
  # Notice that all the storage classes below
  # need to support the 'ReadWriteMany' access mode
  persistence:
    data:
      storageClass: *globalStorageClass
      path: '/data'
      size: 10Gi
      # existingClaim: data
    staticFiles:
      storageClass: *globalStorageClass
      size: 10Mi

  # Secrets to access social authentication providers
  social_auth:
    github:
      client_id:
      client_secret:

  # Email settings
  email:
    user:
    password:

  # Configure pod resources
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # To use GPU you need to install
    # https://github.com/NVIDIA/k8s-device-plugin)
    # on your k8s Cluster
    # limits:
    #   nvidia.com/gpu: 2 # requesting 2 GPUs

  nodeSelector: {}

  tolerations: []

  affinity: {}


# nginx settings
nginx:
  nameOverride: "nginx"

  image:
    # repository:
    # tag: latest
    pullPolicy: *imagePullPolicy
    debug: *debug

  service:
    type: ClusterIP
    port: 80
    #httpsPort: 443

  # name of nginx-proxy configMap
  serverBlockConfigMap: proxy-config

  # serverDataVolume
  serverDataVolumeClaim: "data-{{ .Release.Name }}-static-files"
  serverDataVolumePath: /app/static

  ingress:
    # enabled: false
    # hostname: nginx.backend.172.30.10.101.nip.io
    # annotations:
    #   kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # hosts:
    #   - host:
    #       name: pippo.backend.172.30.10.101.nip.io
    #       path: /

    tls: []
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

# Celery settings
celery:

  acceptContent: 'json' # list of comma separated values
  taskSerializer: 'json'

  service:
    # type: ClusterIP
    # port: 80
    containerPort: 5432

  # ingress:
  #   enabled: true
  #   annotations:
  #     kubernetes.io/ingress.class: nginx
  #     # kubernetes.io/tls-acme: "true"
  #   hosts:
  #     - host: celery.backend.172.30.10.101.nip.io

  #   tls: []
  #   #  - secretName: chart-example-tls
  #   #    hosts:
  #   #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # To use GPU you need to install
    # https://github.com/NVIDIA/k8s-device-plugin)
    # on your k8s Cluster
    # limits:
    #   nvidia.com/gpu: 2 # requesting 2 GPUs

  nodeSelector: {}

  tolerations: []

  affinity: {}


# RabbitMQ settings. You can find all the available settings
# at https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq
broker: &broker
  nameOverride: "rabbitmq"

  image:
    debug: *debug
    pullPolicy: *imagePullPolicy

  rabbitmq:
    username: user
    # password: password

  service:
    port: 5672

  persistence:
    storageClass: *globalStorageClass
    size: 1Gi
    # existingClaim: ""

  rabbitmq:
    existingPasswordSecret: deephealth-backend-rabbitmq-secrets
    existingErlangSecret: deephealth-backend-rabbitmq-secrets

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Copy broker properties as values of the subchart RabbitMQ
rabbitmq: *broker


# PostgreSQL settings.
# You can find all the available settings at https://github.com/bitnami/charts/tree/master/bitnami/postgresql
postgresql:
  nameOverride: "postgresql"
  # DB
  postgresqlDatabase: db
  # credentials
  # postgresqlUsername: postgres
  # postgresqlPassword: ""
  # postgresqlPostgresPassword: ""

  image:
    debug: *debug
    pullPolicy: *imagePullPolicy

  service:
    port: 5432

  persistence:
    storageClass: *globalStorageClass
    size: 1Gi
    # existingClaim: ""

  existingSecret: deephealth-backend-postgresql-secrets

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}


# Debug console settings
console:
  enabled: *debug
  image:
    repository: crs4/k8s-tools
    tag: 1.3
    pullPolicy: *imagePullPolicy
    debug: *debug

  replicaCount: 1

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # To use GPU you need to install
    # https://github.com/NVIDIA/k8s-device-plugin)
    # on your k8s Cluster
    # limits:
    #   nvidia.com/gpu: 2 # requesting 2 GPUs

  nodeSelector: {}

  tolerations: []

  affinity: {}